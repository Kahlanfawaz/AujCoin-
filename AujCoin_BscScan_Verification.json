{
  "language": "Solidity",
  "sources": {
    "AujCoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ncontract AujCoin {\n    string public name = \"AujCoin\";\n    string public symbol = \"auj\";\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n\n    address public owner;\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address, uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor(uint256 _initialSupply) {\n        owner = msg.sender;\n        totalSupply = _initialSupply * 10 ** uint256(decimals);\n        balanceOf[owner] = totalSupply;\n        emit Transfer(address(0), owner, totalSupply);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(to != address(0), \"ERC20: transfer to zero address\");\n        require(balanceOf[msg.sender] >= value, \"ERC20: transfer exceeds balance\");\n        balanceOf[msg.sender] -= value;\n        balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0), \"ERC20: approve to zero address\");\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(to != address(0), \"ERC20: transfer to zero address\");\n        require(balanceOf[from] >= value, \"ERC20: transfer exceeds balance\");\n        require(allowance[from][msg.sender] >= value, \"ERC20: transfer exceeds allowance\");\n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0), \"ERC20: approve to zero address\");\n        allowance[msg.sender][spender] += addedValue;\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0), \"ERC20: approve to zero address\");\n        require(allowance[msg.sender][spender] >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        allowance[msg.sender][spender] -= subtractedValue;\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\n        return true;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner zero address\");\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function balanceOfAccount(address account) public view returns (uint256) {\n        return balanceOf[account];\n    }\n\n    function allowanceOf(address ownerAddress, address spenderAddress) public view returns (uint256) {\n        return allowance[ownerAddress][spenderAddress];\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "london",
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "AujCoin.sol": "AujCoin"
    }
  }
}